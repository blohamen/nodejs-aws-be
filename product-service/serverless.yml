# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: eu-west-1

plugins:
  - serverless-webpack
  - serverless-openapi-documentation

custom:
  documentation:
    version: '1'
    title: 'My API'
    description: 'This is my API'
    models:
      - name: "GetProductsResponse"
        description: "Get products response"
        contentType: "application/json"

      - name: "NotFoundProductResponse"
        description: "NotFoundProductResponse"
        contentType: "application/json"
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceInclude:
        - pg
        - sequelize


# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  getProductsList:
    handler: src/handlers/getProductsList/index.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true
          documentation:
            summary: "Get products list"
            description: "Get full mocked products list "
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: "Full list of products"
                responseModels:
                  application/json: "GetProductsResponse"

  getProductById:
    handler: src/handlers/getProductById/index.getProductById
    events:
      - http:
          path: product/{id}
          method: get
          cors: true
          documentation:
            summary: "Get product"
            description: "Get product by id"
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: "A user object along with generated API Keys"
                responseModels:
                  application/json: "GetProductsResponse"
              - statusCode: 404
                responseBody:
                  description: "Product not found"
                responseModels:
                  application/json: "NotFoundProductResponse"

  addProduct:
    handler: src/handlers/addProduct/index.addProduct
    events:
      - http:
          path: product
          method: post
          cors: true
