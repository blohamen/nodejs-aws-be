service: product-service

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: eu-west-1

  iamRoleStatements:
    - Effect: "Allow"
      Action: "sns:*"
      Resource:
        Ref: SNSTopic

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubscriptionPositive:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SUBSCRIPTION_POSITIVE_STATUS_EMAIL}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          status:
            - "true"

    SNSSubscriptionNegative:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SUBSCRIPTION_NEGATIVE_STATUS_EMAIL}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          status:
            - "false"
plugins:
  - serverless-webpack
  - serverless-openapi-documentation
  - serverless-dotenv-plugin

custom:
  documentation:
    version: '1'
    title: 'My API'
    description: 'This is my API'
    models:
      - name: "GetProductsResponse"
        description: "Get products response"
        contentType: "application/json"

      - name: "NotFoundProductResponse"
        description: "NotFoundProductResponse"
        contentType: "application/json"
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceInclude:
        - pg
        - sequelize

functions:
  getProductsList:
    handler: src/handlers/getProductsList/index.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true
          documentation:
            summary: "Get products list"
            description: "Get full mocked products list "
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: "Full list of products"
                responseModels:
                  application/json: "GetProductsResponse"

  getProductById:
    handler: src/handlers/getProductById/index.getProductById
    events:
      - http:
          path: product/{id}
          method: get
          cors: true
          documentation:
            summary: "Get product"
            description: "Get product by id"
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: "A user object along with generated API Keys"
                responseModels:
                  application/json: "GetProductsResponse"
              - statusCode: 404
                responseBody:
                  description: "Product not found"
                responseModels:
                  application/json: "NotFoundProductResponse"

  addProduct:
    handler: src/handlers/addProduct/index.addProduct
    events:
      - http:
          path: product
          method: post
          cors: true

  catalogBatchProcess:
    handler: src/handlers/catalogBatchProcess/index.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
